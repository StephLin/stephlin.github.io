<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://stephlin.github.io</id>
  <title>StephLin's Personal Blog - Posts tagged Python</title>
  <updated>2022-08-08T10:54:41.671081+00:00</updated>
  <link href="https://stephlin.github.io"/>
  <link href="https://stephlin.github.io/blog/tag/python/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.20">ABlog</generator>
  <entry>
    <id>https://stephlin.github.io/post/convex-optimization/sum-of-squares-polynomials-with-cvxpy/</id>
    <title>Checking Sum of Squares (SOS) Polynomials with CVXPY</title>
    <updated>2020-10-03T00:00:00+00:00</updated>
    <author>
      <name>Yu-Kai Lin</name>
    </author>
    <content type="html">&lt;p&gt;This post aims at introducing a programming way to check if a polynomial is sum of squares.&lt;/p&gt;
</content>
    <link href="https://stephlin.github.io/post/convex-optimization/sum-of-squares-polynomials-with-cvxpy/" rel="alternate"/>
    <summary>This post aims at introducing a programming way to check if a polynomial is sum of squares.</summary>
    <category term="ConvexOptimization" label="Convex Optimization"/>
    <category term="Optimization" label="Optimization"/>
    <category term="SumofSquares" label="Sum of Squares"/>
    <category term="SemidefiniteProgramming" label="Semidefinite Programming"/>
    <category term="Python" label="Python"/>
    <published>2020-10-03T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://stephlin.github.io/post/python/context-management-in-python/</id>
    <title>Context Management in Python</title>
    <updated>2021-01-02T00:00:00+00:00</updated>
    <author>
      <name>Yu-Kai Lin</name>
    </author>
    <content type="html">&lt;p&gt;在執行程式的時候通常會需要存取資源，一般來說資源的來源可能是檔案、遠端連線、或是某種 Socket。本篇我們將整理在 Python 中面對資源存取問題時，透過 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt; 的常見作法、其物件意涵、以及內建套件 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;contextlib&lt;/span&gt;&lt;/code&gt; 的一些使用時機。&lt;/p&gt;
</content>
    <link href="https://stephlin.github.io/post/python/context-management-in-python/" rel="alternate"/>
    <summary>在執行程式的時候通常會需要存取資源，一般來說資源的來源可能是檔案、遠端連線、或是某種 Socket。本篇我們將整理在 Python 中面對資源存取問題時，透過 with 的常見作法、其物件意涵、以及內建套件 contextlib 的一些使用時機。</summary>
    <category term="Python" label="Python"/>
    <category term="ContextManagement" label="Context Management"/>
    <published>2021-01-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://stephlin.github.io/post/python/high-performance-scientific-computing/</id>
    <title>Python 加速符文：高效能平行科學計算</title>
    <updated>2022-08-07T00:00:00+00:00</updated>
    <author>
      <name>Yu-Kai Lin</name>
    </author>
    <content type="html">&lt;p&gt;在 Python 基礎科學運算中，我們習於使用 NumPy 以方便且快速地實現矩陣運算，然而在部分情境下仍會遇到效能瓶頸。舉例來說，我們利用 NumPy 線性代數模組處理一個大型線性最小平方問題，但效能瓶頸卻發生在使用原生 Python 迴圈建造矩陣的過程。在本文中，我們將探討 Python 效能瓶頸問題，並試圖使用一些現有工具去達成運算加速的目的，同時比較這些工具之間的特性。&lt;/p&gt;
</content>
    <link href="https://stephlin.github.io/post/python/high-performance-scientific-computing/" rel="alternate"/>
    <summary>在 Python 基礎科學運算中，我們習於使用 NumPy 以方便且快速地實現矩陣運算，然而在部分情境下仍會遇到效能瓶頸。舉例來說，我們利用 NumPy 線性代數模組處理一個大型線性最小平方問題，但效能瓶頸卻發生在使用原生 Python 迴圈建造矩陣的過程。在本文中，我們將探討 Python 效能瓶頸問題，並試圖使用一些現有工具去達成運算加速的目的，同時比較這些工具之間的特性。</summary>
    <category term="Python" label="Python"/>
    <category term="ParallelComputing" label="Parallel Computing"/>
    <category term="NumPy" label="NumPy"/>
    <category term="Pythran" label="Pythran"/>
    <category term="pybind11" label="pybind11"/>
    <published>2022-08-07T00:00:00+00:00</published>
  </entry>
</feed>
